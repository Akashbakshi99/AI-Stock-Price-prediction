    endog = combined_df['Pct_Change'].dropna()  # Dependent variable
    exog = combined_df['lagged_7day_pct_positive'].dropna()  # Predictor variable
    endog = endog.loc[exog.index]  # Align variables
    model = SARIMAX(endog, exog=exog, order=(1, 1, 1))  # ARIMAX model
    fit = model.fit(disp=False)  # Fit model
    
    future_dates = get_future_dates(combined_df.index[-1], forecast_steps)  # Future dates
    future_exog = combined_df['lagged_7day_pct_positive'][-forecast_steps:].values.reshape(-1, 1)  # Future exogenous values
    
    forecast = fit.get_forecast(steps=forecast_steps, exog=future_exog)  # Get forecast
    forecast_mean = forecast.predicted_mean  # Predicted mean
    forecast_ci = forecast.conf_int()  # Confidence intervals
    
    return forecast_mean, forecast_ci, future_dates  # Return results


# Function to create and display plot
def create_plot(combined_df, forecast_mean, forecast_ci, forecast_index):
    # Standardize the sentiment proportion
    sentiment_std = (combined_df['7day_pct_positive'] - combined_df['7day_pct_positive'].mean()) / combined_df['7day_pct_positive'].std()

    fig = go.Figure()
    
    # Add standardized sentiment proportion
    fig.add_trace(go.Scatter(
        x=combined_df.index, 
        y=sentiment_std, 
        name='Standardized Sentiment Proportion', 
        line=dict(color='blue'), 
        mode='lines'
    ))
    
    # Add stock percentage change
    fig.add_trace(go.Scatter(
        x=combined_df.index, 
        y=combined_df['Pct_Change'], 
        name='Stock Pct Change', 
        line=dict(color='green'), 
        yaxis='y2', 
        mode='lines'
    ))
    
    # Add forecasted stock percentage change
    fig.add_trace(go.Scatter(
        x=forecast_index, 
        y=forecast_mean, 
        name='Forecasted Pct Change', 
        line=dict(color='red'), 
        mode='lines'
    ))
    
    # Add confidence intervals for the forecast
    fig.add_trace(go.Scatter(
        x=np.concatenate([forecast_index, forecast_index[::-1]]),
        y=np.concatenate([forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1][::-1]]),
        fill='toself',
        fillcolor='rgba(255,0,0,0.2)',
        line=dict(color='rgba(255,255,255,0)'),
        hoverinfo="skip",
        showlegend=False
    ))
    
    # Update layout with appropriate y-axis ranges
    fig.update_layout(
        title='Sentiment Proportion and Stock Percentage Change with Forecast',
        xaxis_title='Date',
        yaxis=dict(
            title='Standardized Sentiment Proportion',
            titlefont=dict(color='blue')
        ),
        yaxis2=dict(
            title='Stock Pct Change',
            titlefont=dict(color='green'),
            overlaying='y',
            side='right'
        ),
        template='plotly_dark'
    )
    st.plotly_chart(fig)


##############
### PART 3 ###
# STREAMLIT ##
##############

# Streamlit app
st.sidebar.title("Predicting Stock Prices by News Sentiment")
ticker = st.sidebar.text_input("Enter stock ticker (e.g., SBUX):", value='SBUX')
run_button = st.sidebar.button("Run Analysis")

if run_button:
    news_df = get_news_data(ticker)
    result_df = process_sentiment_data(news_df)
    start_date = result_df['DateOnly'].min().strftime('%Y-%m-%d')
    end_date = result_df['DateOnly'].max().strftime('%Y-%m-%d')
    stock_data = get_stock_data(ticker, start_date, end_date)
    combined_df = combine_data(result_df, stock_data)
    correlation_pct_change = calculate_correlation(combined_df)
    st.write(f'Pearson correlation between lagged sentiment score and stock percentage change: {correlation_pct_change}')
    forecast_mean, forecast_ci, forecast_index = fit_and_forecast(combined_df)
    create_plot(combined_df, forecast_mean, forecast_ci, forecast_index)






    
